{"abi":[{"type":"function","name":"allow","inputs":[{"name":"handle","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"allowForDecryption","inputs":[{"name":"handlesList","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"allowTransient","inputs":[{"name":"ciphertext","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cleanTransientStorage","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isAllowed","inputs":[{"name":"handle","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isAllowedForDecryption","inputs":[{"name":"handle","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allow(bytes32,address)":"b9496b62","allowForDecryption(bytes32[])":"fadd2246","allowTransient(bytes32,address)":"3e395cec","cleanTransientStorage()":"35334c23","isAllowed(bytes32,address)":"82027b6d","isAllowedForDecryption(bytes32)":"c0d02943"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"handlesList\",\"type\":\"bytes32[]\"}],\"name\":\"allowForDecryption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ciphertext\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowTransient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanTransientStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"}],\"name\":\"isAllowedForDecryption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allow(bytes32,address)\":{\"details\":\"The caller must be allowed to use handle for allow() to succeed. If not, allow() reverts.\",\"params\":{\"account\":\"Address of the account.\",\"handle\":\"Handle.\"}},\"allowForDecryption(bytes32[])\":{\"params\":{\"handlesList\":\"List of handles.\"}},\"allowTransient(bytes32,address)\":{\"details\":\"The caller must be allowed to use handle for allowTransient() to succeed.                      If not, allowTransient() reverts.                      The Coprocessor contract can always allowTransient(), contrarily to allow().\",\"params\":{\"account\":\"Address of the account.\",\"ciphertext\":\"Ciphertext.\"}},\"cleanTransientStorage()\":{\"details\":\"This function removes the transient allowances, which could be useful for integration with      Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\"},\"isAllowed(bytes32,address)\":{\"params\":{\"account\":\"Address of the account.\",\"handle\":\"Handle.\"},\"returns\":{\"_0\":\"isAllowed    Whether the account can access the handle.\"}},\"isAllowedForDecryption(bytes32)\":{\"params\":{\"handle\":\"Handle.\"},\"returns\":{\"_0\":\"isDecryptable    Whether the handle can be publicly decrypted.\"}}},\"title\":\"IACL.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allow(bytes32,address)\":{\"notice\":\"Allows the use of handle for the address account.\"},\"allowForDecryption(bytes32[])\":{\"notice\":\"Allows a list of handles to be decrypted.\"},\"allowTransient(bytes32,address)\":{\"notice\":\"Allows the use of handle by address account for this transaction.\"},\"isAllowed(bytes32,address)\":{\"notice\":\"Returns whether the account is allowed to use the handle, either due to                      allowTransient() or allow().\"},\"isAllowedForDecryption(bytes32)\":{\"notice\":\"Returns wether a handle is allowed to be publicly decrypted.\"}},\"notice\":\"This interface contains all functions that are used to conduct operations          with the ACL contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/fhevm/library-solidity/lib/Impl.sol\":\"IACL\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@fhevm/solidity/=lib/fhevm/library-solidity/\",\":@openzeppelin/=lib/fhevm/library-solidity/node_modules/@openzeppelin/\",\":@zama-fhe/=lib/fhevm/library-solidity/node_modules/\",\":contracts/=../../contracts/\",\":encrypted-types/=lib/fhevm/library-solidity/node_modules/encrypted-types/\",\":eth-gas-reporter/=lib/fhevm/library-solidity/node_modules/eth-gas-reporter/\",\":fhevm/=lib/fhevm/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=lib/fhevm/library-solidity/node_modules/hardhat-deploy/\",\":hardhat/=lib/fhevm/library-solidity/node_modules/hardhat/\"]},\"sources\":{\"lib/fhevm/library-solidity/lib/FheType.sol\":{\"keccak256\":\"0x945f006108fab92cb082a6e5a80525953f17b8d8dcf88a283a83fc80c765497a\",\"license\":\"BSD-3-Clause-Clear\",\"urls\":[\"bzz-raw://0089374b6433a2d342bad116628aaf7a62393a11672739865dee139811e6d35c\",\"dweb:/ipfs/Qmexn5aAGEfSEdxrQPvP2Ahzi4QrMfLW46YSp9kvJCVyu4\"]},\"lib/fhevm/library-solidity/lib/Impl.sol\":{\"keccak256\":\"0xf4d58b67ea3f81a56c5c8a66ad9843631909b8c393b87e0b42a7a3eb3d5fedb8\",\"license\":\"BSD-3-Clause-Clear\",\"urls\":[\"bzz-raw://775409e9d92c9e0a1f4f95bef64a2b81da4d9e43a7300031cc5000946dc43104\",\"dweb:/ipfs/QmVfasR4r1M1FPo4XveFewfV4JdcFjeJdVSyWxQ3FSTCi6\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"handle","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"allow"},{"inputs":[{"internalType":"bytes32[]","name":"handlesList","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"allowForDecryption"},{"inputs":[{"internalType":"bytes32","name":"ciphertext","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"allowTransient"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"cleanTransientStorage"},{"inputs":[{"internalType":"bytes32","name":"handle","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"isAllowed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"handle","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isAllowedForDecryption","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"allow(bytes32,address)":{"details":"The caller must be allowed to use handle for allow() to succeed. If not, allow() reverts.","params":{"account":"Address of the account.","handle":"Handle."}},"allowForDecryption(bytes32[])":{"params":{"handlesList":"List of handles."}},"allowTransient(bytes32,address)":{"details":"The caller must be allowed to use handle for allowTransient() to succeed.                      If not, allowTransient() reverts.                      The Coprocessor contract can always allowTransient(), contrarily to allow().","params":{"account":"Address of the account.","ciphertext":"Ciphertext."}},"cleanTransientStorage()":{"details":"This function removes the transient allowances, which could be useful for integration with      Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor."},"isAllowed(bytes32,address)":{"params":{"account":"Address of the account.","handle":"Handle."},"returns":{"_0":"isAllowed    Whether the account can access the handle."}},"isAllowedForDecryption(bytes32)":{"params":{"handle":"Handle."},"returns":{"_0":"isDecryptable    Whether the handle can be publicly decrypted."}}},"version":1},"userdoc":{"kind":"user","methods":{"allow(bytes32,address)":{"notice":"Allows the use of handle for the address account."},"allowForDecryption(bytes32[])":{"notice":"Allows a list of handles to be decrypted."},"allowTransient(bytes32,address)":{"notice":"Allows the use of handle by address account for this transaction."},"isAllowed(bytes32,address)":{"notice":"Returns whether the account is allowed to use the handle, either due to                      allowTransient() or allow()."},"isAllowedForDecryption(bytes32)":{"notice":"Returns wether a handle is allowed to be publicly decrypted."}},"version":1}},"settings":{"remappings":["@fhevm/solidity/=lib/fhevm/library-solidity/","@openzeppelin/=lib/fhevm/library-solidity/node_modules/@openzeppelin/","@zama-fhe/=lib/fhevm/library-solidity/node_modules/","contracts/=../../contracts/","encrypted-types/=lib/fhevm/library-solidity/node_modules/encrypted-types/","eth-gas-reporter/=lib/fhevm/library-solidity/node_modules/eth-gas-reporter/","fhevm/=lib/fhevm/","forge-std/=lib/forge-std/src/","hardhat-deploy/=lib/fhevm/library-solidity/node_modules/hardhat-deploy/","hardhat/=lib/fhevm/library-solidity/node_modules/hardhat/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/fhevm/library-solidity/lib/Impl.sol":"IACL"},"evmVersion":"prague","libraries":{}},"sources":{"lib/fhevm/library-solidity/lib/FheType.sol":{"keccak256":"0x945f006108fab92cb082a6e5a80525953f17b8d8dcf88a283a83fc80c765497a","urls":["bzz-raw://0089374b6433a2d342bad116628aaf7a62393a11672739865dee139811e6d35c","dweb:/ipfs/Qmexn5aAGEfSEdxrQPvP2Ahzi4QrMfLW46YSp9kvJCVyu4"],"license":"BSD-3-Clause-Clear"},"lib/fhevm/library-solidity/lib/Impl.sol":{"keccak256":"0xf4d58b67ea3f81a56c5c8a66ad9843631909b8c393b87e0b42a7a3eb3d5fedb8","urls":["bzz-raw://775409e9d92c9e0a1f4f95bef64a2b81da4d9e43a7300031cc5000946dc43104","dweb:/ipfs/QmVfasR4r1M1FPo4XveFewfV4JdcFjeJdVSyWxQ3FSTCi6"],"license":"BSD-3-Clause-Clear"}},"version":1},"id":9}